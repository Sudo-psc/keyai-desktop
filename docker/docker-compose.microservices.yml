version: '3.8'

services:
  # Core Services Only
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: keyai
      POSTGRES_PASSWORD: keyaipass
      POSTGRES_DB: keyai
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keyai"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservices
  auth-service:
    build: ../services/auth-service
    ports:
      - "3005:3005"
    environment:
      DATABASE_URL: postgres://keyai:keyaipass@postgres:5432/keyai
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-secret-key-change-in-production
      SERVICE_NAME: auth-service
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  capture-service:
    build: ../services/capture-service
    ports:
      - "3001:3001"
    environment:
      CAPTURE_RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      CAPTURE_REDIS_URL: redis://redis:6379
      CAPTURE_SERVICE_NAME: capture-service
      CAPTURE_LOG_LEVEL: info
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # May need additional privileges for keyboard capture
    privileged: true
    volumes:
      - /dev/input:/dev/input:ro

  masker-service:
    build: ../services/masker-service
    ports:
      - "3002:3002"
    environment:
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      REDIS_URL: redis://redis:6379
      SERVICE_NAME: masker-service
      LOG_LEVEL: info
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  storage-service:
    build: ../services/storage-service
    ports:
      - "3003:3003"
    environment:
      DATABASE_URL: postgres://keyai:keyaipass@postgres:5432/keyai
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      SERVICE_NAME: storage-service
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  search-service:
    build: ../services/search-service
    ports:
      - "3004:3004"
    environment:
      DATABASE_URL: postgres://keyai:keyaipass@postgres:5432/keyai
      REDIS_URL: redis://redis:6379
      SERVICE_NAME: search-service
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:

networks:
  default:
    name: keyai-dev-network 