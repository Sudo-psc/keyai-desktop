version: '3.8'

services:
  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: keyai-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - keyai-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # Database
  postgres:
    image: postgres:16-alpine
    container_name: keyai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=keyai
      - POSTGRES_PASSWORD=keyai
      - POSTGRES_DB=keyai
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - keyai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keyai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: keyai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - keyai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  kong:
    image: kong:3.5-alpine
    container_name: keyai-gateway
    ports:
      - "8000:8000"  # Proxy port
      - "8443:8443"  # Proxy SSL port
      - "8001:8001"  # Admin API port
      - "8444:8444"  # Admin API SSL port
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    volumes:
      - ./kong.yml:/kong/declarative/kong.yml:ro
    networks:
      - keyai-network
    depends_on:
      - agent-service
      - masker-service
      - storage-service
      - search-service

  # Agent Service
  agent-service:
    build:
      context: ../services/agent-service
      dockerfile: Dockerfile
    container_name: keyai-agent-service
    ports:
      - "8011:8001"  # Map to different host port to avoid conflicts
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - SERVICE_NAME=agent-service
    networks:
      - keyai-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Masker Service
  masker-service:
    build:
      context: ../services/masker-service
      dockerfile: Dockerfile
    container_name: keyai-masker-service
    ports:
      - "8012:8002"  # Map to different host port
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - SERVICE_NAME=masker-service
    networks:
      - keyai-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Storage Service
  storage-service:
    build:
      context: ../services/storage-service
      dockerfile: Dockerfile
    container_name: keyai-storage-service
    ports:
      - "8013:8003"  # Map to different host port
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgres://keyai:keyai@postgres:5432/keyai
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - SERVICE_NAME=storage-service
    networks:
      - keyai-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Search Service
  search-service:
    build:
      context: ../services/search-service
      dockerfile: Dockerfile
    container_name: keyai-search-service
    ports:
      - "8014:8004"  # Map to different host port
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgres://keyai:keyai@postgres:5432/keyai
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=search-service
    networks:
      - keyai-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: keyai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - keyai-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: keyai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - keyai-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Tracing - Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: keyai-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - keyai-network
    restart: unless-stopped

networks:
  keyai-network:
    driver: bridge
    name: keyai-network

volumes:
  postgres-data:
    name: keyai-postgres-data
  redis-data:
    name: keyai-redis-data
  rabbitmq-data:
    name: keyai-rabbitmq-data
  prometheus-data:
    name: keyai-prometheus-data
  grafana-data:
    name: keyai-grafana-data 