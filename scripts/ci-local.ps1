# Script para executar CI localmente no Windows
# Simula os mesmos checks que rodam no GitHub Actions

$ErrorActionPreference = "Stop"

Write-Host "üöÄ Iniciando CI Local para KeyAI Desktop" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

# Fun√ß√£o para printar status
function Print-Status {
    param(
        [bool]$Success,
        [string]$Message
    )
    
    if ($Success) {
        Write-Host "‚úì $Message" -ForegroundColor Green
    } else {
        Write-Host "‚úó $Message" -ForegroundColor Red
        exit 1
    }
}

# 1. Verificar ferramentas necess√°rias
Write-Host "`nüìã Verificando ferramentas..." -ForegroundColor Yellow

$cargoExists = Get-Command cargo -ErrorAction SilentlyContinue
Print-Status ($null -ne $cargoExists) "Rust/Cargo instalado"

$nodeExists = Get-Command node -ErrorAction SilentlyContinue
Print-Status ($null -ne $nodeExists) "Node.js instalado"

$npmExists = Get-Command npm -ErrorAction SilentlyContinue
Print-Status ($null -ne $npmExists) "npm instalado"

# 2. Rust Checks
Write-Host "`nü¶Ä Verificando c√≥digo Rust..." -ForegroundColor Yellow

Write-Host "  ‚Üí Formata√ß√£o..."
$formatResult = & cargo fmt -- --check 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Formata√ß√£o Rust OK"

Write-Host "  ‚Üí Clippy..."
$clippyResult = & cargo clippy --all-targets --all-features -- -D warnings 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Clippy sem warnings"

Write-Host "  ‚Üí Testes..."
$testResult = & cargo test --verbose 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Testes Rust passando"

Write-Host "  ‚Üí Documenta√ß√£o..."
$docResult = & cargo doc --no-deps --all-features 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Documenta√ß√£o Rust OK"

# 3. Frontend Checks
Write-Host "`n‚öõÔ∏è  Verificando c√≥digo Frontend..." -ForegroundColor Yellow

Push-Location frontend

Write-Host "  ‚Üí Instalando depend√™ncias..."
$npmCiResult = & npm ci 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Depend√™ncias instaladas"

Write-Host "  ‚Üí Linting..."
$lintResult = & npm run lint 2>&1
Print-Status ($LASTEXITCODE -eq 0) "ESLint sem erros"

Write-Host "  ‚Üí Type checking..."
$typeResult = & npm run typecheck 2>&1
Print-Status ($LASTEXITCODE -eq 0) "TypeScript sem erros"

Write-Host "  ‚Üí Formata√ß√£o..."
$formatCheckResult = & npm run format:check 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Formata√ß√£o Frontend OK"

Write-Host "  ‚Üí Testes..."
$testFrontendResult = & npm test -- --run 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Testes Frontend passando"

Write-Host "  ‚Üí Build..."
$buildResult = & npm run build 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Build Frontend OK"

Pop-Location

# 4. Build completo
Write-Host "`nüî® Build completo..." -ForegroundColor Yellow
$releaseBuild = & cargo build --release 2>&1
Print-Status ($LASTEXITCODE -eq 0) "Build Release OK"

# 5. An√°lise de seguran√ßa (opcional)
$cargoAuditExists = Get-Command cargo-audit -ErrorAction SilentlyContinue
if ($null -ne $cargoAuditExists) {
    Write-Host "`nüîí An√°lise de seguran√ßa..." -ForegroundColor Yellow
    $auditResult = & cargo audit 2>&1
    Print-Status ($LASTEXITCODE -eq 0) "Sem vulnerabilidades conhecidas"
} else {
    Write-Host "`n‚ö†Ô∏è  cargo-audit n√£o instalado. Pulando an√°lise de seguran√ßa." -ForegroundColor DarkYellow
    Write-Host "   Instale com: cargo install cargo-audit" -ForegroundColor DarkYellow
}

# 6. Resumo
Write-Host "`n========================================" -ForegroundColor Green
Write-Host "‚úÖ CI Local conclu√≠do com sucesso!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host ""
Write-Host "Pr√≥ximos passos:"
Write-Host "  1. Commit suas mudan√ßas"
Write-Host "  2. Push para o GitHub"
Write-Host "  3. Abra um Pull Request"
Write-Host ""
Write-Host "Dica: Execute '/autofix' no PR para corre√ß√µes autom√°ticas"