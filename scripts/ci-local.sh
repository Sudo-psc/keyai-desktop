#!/bin/bash

# Script para executar CI localmente
# Simula os mesmos checks que rodam no GitHub Actions

set -e

echo "üöÄ Iniciando CI Local para KeyAI Desktop"
echo "========================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para printar status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úì${NC} $2"
    else
        echo -e "${RED}‚úó${NC} $2"
        exit 1
    fi
}

# 1. Verificar ferramentas necess√°rias
echo -e "\nüìã Verificando ferramentas..."
command -v cargo >/dev/null 2>&1
print_status $? "Rust/Cargo instalado"

command -v node >/dev/null 2>&1
print_status $? "Node.js instalado"

command -v npm >/dev/null 2>&1
print_status $? "npm instalado"

# 2. Rust Checks
echo -e "\nü¶Ä Verificando c√≥digo Rust..."

echo "  ‚Üí Formata√ß√£o..."
cargo fmt -- --check
print_status $? "Formata√ß√£o Rust OK"

echo "  ‚Üí Clippy..."
cargo clippy --all-targets --all-features -- -D warnings
print_status $? "Clippy sem warnings"

echo "  ‚Üí Testes..."
cargo test --verbose
print_status $? "Testes Rust passando"

echo "  ‚Üí Documenta√ß√£o..."
cargo doc --no-deps --all-features
print_status $? "Documenta√ß√£o Rust OK"

# 3. Frontend Checks
echo -e "\n‚öõÔ∏è  Verificando c√≥digo Frontend..."

cd frontend

echo "  ‚Üí Instalando depend√™ncias..."
npm ci
print_status $? "Depend√™ncias instaladas"

echo "  ‚Üí Linting..."
npm run lint
print_status $? "ESLint sem erros"

echo "  ‚Üí Type checking..."
npm run typecheck
print_status $? "TypeScript sem erros"

echo "  ‚Üí Formata√ß√£o..."
npm run format:check
print_status $? "Formata√ß√£o Frontend OK"

echo "  ‚Üí Testes..."
npm test -- --run
print_status $? "Testes Frontend passando"

echo "  ‚Üí Build..."
npm run build
print_status $? "Build Frontend OK"

cd ..

# 4. Build completo
echo -e "\nüî® Build completo..."
cargo build --release
print_status $? "Build Release OK"

# 5. An√°lise de seguran√ßa (opcional)
if command -v cargo-audit >/dev/null 2>&1; then
    echo -e "\nüîí An√°lise de seguran√ßa..."
    cargo audit
    print_status $? "Sem vulnerabilidades conhecidas"
else
    echo -e "\n${YELLOW}‚ö†Ô∏è  cargo-audit n√£o instalado. Pulando an√°lise de seguran√ßa.${NC}"
    echo "   Instale com: cargo install cargo-audit"
fi

# 6. Resumo
echo -e "\n========================================"
echo -e "${GREEN}‚úÖ CI Local conclu√≠do com sucesso!${NC}"
echo -e "========================================"
echo ""
echo "Pr√≥ximos passos:"
echo "  1. Commit suas mudan√ßas"
echo "  2. Push para o GitHub"
echo "  3. Abra um Pull Request"
echo ""
echo "Dica: Execute '/autofix' no PR para corre√ß√µes autom√°ticas"