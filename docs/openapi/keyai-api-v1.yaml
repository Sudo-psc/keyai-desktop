openapi: 3.0.3
info:
  title: KeyAI Microservices API
  version: 1.0.0
  description: |
    Complete API documentation for KeyAI's microservices architecture.
    
    ## Services Overview
    
    - **Auth Service** (Port 3005): Authentication and user management
    - **Capture Service** (Port 3001): Keyboard event capture
    - **Masker Service** (Port 3002): PII detection and masking
    - **Storage Service** (Port 3003): Data persistence
    - **Search Service** (Port 3004): Hybrid search capabilities
    
  contact:
    name: KeyAI Team
    email: api@keyai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Kong API Gateway (Production)
  - url: http://localhost:{port}
    description: Direct service access (Development)
    variables:
      port:
        enum:
          - "3001"
          - "3002"
          - "3003"
          - "3004"
          - "3005"
        default: "3001"

tags:
  - name: auth
    description: Authentication operations
  - name: capture
    description: Keyboard capture operations
  - name: masker
    description: PII masking operations
  - name: storage
    description: Data storage operations
  - name: search
    description: Search operations
  - name: health
    description: Health check endpoints

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    # Common Schemas
    Error:
      type: object
      required:
        - error
        - message
        - request_id
      properties:
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Invalid input"
        request_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
    
    # Auth Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123!"
    
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIs..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIs..."
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          example: 3600
    
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        created_at:
          type: string
          format: date-time
    
    # Capture Schemas
    KeystrokeEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        event_type:
          type: string
          enum: [keypress, keyrelease]
        key:
          type: string
          example: "a"
        key_code:
          type: integer
          example: 65
        timestamp:
          type: integer
          format: int64
          example: 1704067200000
        user_id:
          type: string
        session_id:
          type: string
        application:
          type: string
          example: "VS Code"
        modifiers:
          $ref: '#/components/schemas/KeyModifiers'
    
    KeyModifiers:
      type: object
      properties:
        shift:
          type: boolean
        ctrl:
          type: boolean
        alt:
          type: boolean
        meta:
          type: boolean
    
    CaptureStatus:
      type: object
      properties:
        active:
          type: boolean
        events_captured:
          type: integer
          format: int64
        events_published:
          type: integer
          format: int64
        errors:
          type: integer
          format: int64
        started_at:
          type: string
          format: date-time
    
    # Masker Schemas
    MaskRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          example: "My email is john.doe@example.com"
        context:
          type: string
    
    MaskResponse:
      type: object
      properties:
        original:
          type: string
        masked:
          type: string
          example: "My email is ***@***.***"
        pii_found:
          type: array
          items:
            $ref: '#/components/schemas/PiiFound'
        processing_time_ms:
          type: number
          format: double
    
    PiiFound:
      type: object
      properties:
        pii_type:
          type: string
          example: "email"
        start:
          type: integer
        end:
          type: integer
        original_value:
          type: string
          example: "jo...om"
        masked_value:
          type: string
          example: "***@***.***"
    
    # Search Schemas
    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          example: "meeting notes"
        search_type:
          type: string
          enum: [text, semantic, hybrid]
          default: "hybrid"
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        offset:
          type: integer
          minimum: 0
          default: 0
        filters:
          type: object
          properties:
            start_date:
              type: string
              format: date-time
            end_date:
              type: string
              format: date-time
            applications:
              type: array
              items:
                type: string
    
    SearchResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        timestamp:
          type: string
          format: date-time
        application:
          type: string
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1
        highlights:
          type: array
          items:
            type: string

paths:
  # Auth Service Endpoints
  /auth/login:
    post:
      tags: [auth]
      summary: User login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/refresh:
    post:
      tags: [auth]
      summary: Refresh access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  
  /auth/profile:
    get:
      tags: [auth]
      summary: Get user profile
      operationId: getProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  
  # Capture Service Endpoints
  /capture/status:
    get:
      tags: [capture]
      summary: Get capture status
      operationId: getCaptureStatus
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Capture status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureStatus'
  
  /capture/start:
    post:
      tags: [capture]
      summary: Start keyboard capture
      operationId: startCapture
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Capture started
        '400':
          description: Capture already active
  
  /capture/stop:
    post:
      tags: [capture]
      summary: Stop keyboard capture
      operationId: stopCapture
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Capture stopped
        '400':
          description: Capture not active
  
  # Masker Service Endpoints
  /masker/mask:
    post:
      tags: [masker]
      summary: Mask PII in text
      operationId: maskText
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaskRequest'
      responses:
        '200':
          description: Text masked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaskResponse'
  
  # Search Service Endpoints
  /search:
    post:
      tags: [search]
      summary: Search captured keystrokes
      operationId: search
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/SearchResult'
                  total:
                    type: integer
                  took_ms:
                    type: number
                    format: double
  
  # Health Check Endpoints (all services)
  /{service}/health:
    get:
      tags: [health]
      summary: Health check for service
      operationId: healthCheck
      parameters:
        - name: service
          in: path
          required: true
          schema:
            type: string
            enum: [auth, capture, masker, storage, search]
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "healthy"
        '503':
          description: Service is unhealthy 