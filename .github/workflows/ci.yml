name: CI

on:
  push:
    branches: [ develop, feature/*, bugfix/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Análise de código e linting
  lint-rust:
    name: Lint Rust Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check documentation
        run: cargo doc --no-deps --all-features

  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend
          npm run lint || true
      
      - name: TypeScript type check
        run: |
          cd frontend
          npx tsc --noEmit

  # Testes unitários
  test-rust:
    name: Test Rust (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxdo-dev libxcb-shape0-dev libxcb-xfixes0-dev
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}
      
      - name: Run tests
        run: cargo test --verbose
      
      - name: Run tests with all features
        run: cargo test --all-features --verbose

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run tests
        run: |
          cd frontend
          npm test -- --run || true
      
      - name: Generate coverage report
        run: |
          cd frontend
          npm run test:coverage || true

  # Testes de integração
  integration-tests:
    name: Integration Tests
    needs: [lint-rust, lint-frontend, test-rust, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libx11-dev libxdo-dev xvfb
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Run integration tests
        run: |
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          cargo test --test '*' --verbose

  # Análise de código
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run cargo-audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for unsafe code
        run: |
          cargo install cargo-geiger || true
          cargo geiger || true
      
      - name: License check
        run: |
          cargo install cargo-license || true
          cargo license || true

  # Build de teste
  build-test:
    name: Build Test (${{ matrix.os }})
    needs: [lint-rust, lint-frontend]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libx11-dev libxdo-dev
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install and build frontend
        run: |
          cd frontend
          npm ci
          npm run build
      
      - name: Build Rust project
        run: cargo build --release

  # Relatório de status
  ci-status:
    name: CI Status
    if: always()
    needs: [lint-rust, lint-frontend, test-rust, test-frontend, integration-tests, code-analysis, build-test]
    runs-on: ubuntu-latest
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "CI failed"
            exit 1
          else
            echo "CI passed"
          fi