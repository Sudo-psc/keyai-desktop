name: Auto Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # An√°lise de complexidade de c√≥digo
  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Analyze code complexity
        run: |
          cargo install cargo-complexity || true
          echo "## üìä An√°lise de Complexidade" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cargo complexity --format json > complexity.json || true
          
      - name: Comment PR with complexity report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let complexityData = '';
            try {
              complexityData = fs.readFileSync('complexity.json', 'utf8');
            } catch (e) {
              complexityData = '{}';
            }
            
            const comment = `## üìä Relat√≥rio de Complexidade
            
            Este √© um relat√≥rio autom√°tico de an√°lise de complexidade do c√≥digo.
            
            ### M√©tricas Analisadas:
            - **Complexidade Ciclom√°tica**: N√∫mero de caminhos independentes
            - **Complexidade Cognitiva**: Dificuldade de compreens√£o
            - **Linhas de C√≥digo**: Total de linhas por fun√ß√£o
            
            \`\`\`json
            ${complexityData}
            \`\`\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # An√°lise de seguran√ßa
  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: SAST Scan
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_RUST_2015: true
          VALIDATE_RUST_2018: true
          VALIDATE_RUST_2021: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}

  # An√°lise de c√≥digo duplicado
  duplication-check:
    name: Code Duplication Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for duplicate code
        run: |
          cargo install cargo-duplicate || true
          echo "## üîç An√°lise de Duplica√ß√£o de C√≥digo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cargo duplicate > duplication_report.txt || true
          cat duplication_report.txt >> $GITHUB_STEP_SUMMARY

  # Review autom√°tico com AI
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          separator: ','
      
      - name: AI Review
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(',');
            
            // An√°lise de padr√µes comuns
            const reviewComments = [];
            
            for (const file of changedFiles) {
              if (file.endsWith('.rs')) {
                reviewComments.push({
                  path: file,
                  position: 1,
                  body: `ü§ñ **Review Autom√°tico**:
                  
                  Verifique os seguintes pontos:
                  - [ ] Tratamento de erros com \`Result<T, E>\`
                  - [ ] Documenta√ß√£o de fun√ß√µes p√∫blicas
                  - [ ] Testes unit√°rios inclu√≠dos
                  - [ ] Sem uso de \`unwrap()\` em produ√ß√£o
                  - [ ] Conformidade com conven√ß√µes Rust`
                });
              } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
                reviewComments.push({
                  path: file,
                  position: 1,
                  body: `ü§ñ **Review Autom√°tico**:
                  
                  Verifique os seguintes pontos:
                  - [ ] Tipagem forte (sem \`any\`)
                  - [ ] Hooks seguem as regras do React
                  - [ ] Componentes s√£o funcionais
                  - [ ] Props s√£o tipadas corretamente
                  - [ ] Sem console.log em produ√ß√£o`
                });
              }
            }
            
            // Criar review
            if (reviewComments.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'COMMENT',
                comments: reviewComments.slice(0, 10) // Limitar a 10 coment√°rios
              });
            }

  # An√°lise de performance
  performance-review:
    name: Performance Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Run benchmarks
        run: |
          cargo bench --no-run || true
          echo "## ‚ö° An√°lise de Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Benchmarks compilados com sucesso" >> $GITHUB_STEP_SUMMARY

  # Sugest√µes de melhorias
  improvement-suggestions:
    name: Improvement Suggestions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate suggestions
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const suggestions = [];
            
            // Sugest√µes baseadas no t√≠tulo do PR
            if (!pr.title.match(/^(feat|fix|docs|style|refactor|test|chore):/)) {
              suggestions.push('üìù Use Conventional Commits no t√≠tulo do PR (ex: feat: nova funcionalidade)');
            }
            
            // Sugest√µes baseadas no tamanho do PR
            if (pr.additions + pr.deletions > 500) {
              suggestions.push('üìè PR muito grande. Considere dividir em PRs menores para facilitar o review');
            }
            
            // Sugest√µes baseadas na descri√ß√£o
            if (!pr.body || pr.body.length < 50) {
              suggestions.push('üìÑ Adicione uma descri√ß√£o mais detalhada ao PR');
            }
            
            if (suggestions.length > 0) {
              const comment = `## üí° Sugest√µes de Melhoria
              
              ${suggestions.map(s => `- ${s}`).join('\n')}
              
              ---
              *Este √© um coment√°rio autom√°tico gerado pelo sistema de review.*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }